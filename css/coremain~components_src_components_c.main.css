/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define .dc-currency-badge */
.dc-currency-badge {
  align-self: flex-start;
  padding: 0.3rem;
  background-color: #85acb0;
  border-radius: 4px; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-datepicker; weak */
.dc-datepicker {
  position: relative;
  display: inline-block;
  width: 100%; }
  .dc-datepicker__input .dc-input__field {
    width: 100%;
    border-radius: 4px;
    box-sizing: border-box;
    padding: 0 1.2rem;
    -webkit-appearance: none;
    -moz-appearance: none; }
    .dc-datepicker__input .dc-input__field:hover:not(:disabled) {
      cursor: pointer;
      border-color: var(--border-hover); }
    .dc-datepicker__input .dc-input__field:focus {
      outline: none; }
    .dc-datepicker__input .dc-input__field:active {
      border-color: var(--border-active); }
    .dc-datepicker__input .dc-input__field::-ms-clear {
      display: none; }
    .dc-datepicker__input .dc-input__field::-moz-placeholder {
      /* Fix value placeholder for datepicker for Firefox 19+ */
      line-height: 4rem; }
  .dc-datepicker__input--has-leading-icon .dc-input__field {
    text-align: center; }
  .dc-datepicker .dc-icon {
    top: 25%; }
    .dc-datepicker .dc-icon:not(.dc-icon--disabled) {
      cursor: pointer; }
  .dc-datepicker__picker {
    position: absolute;
    z-index: 2;
    transform: translate3d(0, 0, 0);
    opacity: 1; }
    .dc-datepicker__picker--left-enter, .dc-datepicker__picker--left-exit {
      transform: translate3d(-275px, 0, 0);
      opacity: 0; }
    .dc-datepicker__picker--left-enter-done {
      transform: translate3d(-295px, 0, 0);
      opacity: 1; }
    .dc-datepicker__picker--left-enter-done, .dc-datepicker__picker--left-exit {
      transition: transform 0.25s ease, opacity 0.25s linear; }
    .dc-datepicker__picker--top-enter, .dc-datepicker__picker--top-exit {
      transform: translate3d(0, 0, 0);
      opacity: 0; }
    .dc-datepicker__picker--top-enter-done {
      transform: translate3d(0, -40px, 0);
      opacity: 1; }
    .dc-datepicker__picker--top-enter-done, .dc-datepicker__picker--top-exit {
      transition: transform 0.25s ease, opacity 0.25s linear; }
    .dc-datepicker__picker--bottom-enter, .dc-datepicker__picker--bottom-exit {
      transform: translate3d(0, 0, 0);
      opacity: 0; }
    .dc-datepicker__picker--bottom-enter-done {
      transform: translate3d(0, 40px, 0);
      opacity: 1; }
    .dc-datepicker__picker--bottom-enter-done, .dc-datepicker__picker--bottom-exit {
      transition: transform 0.25s ease, opacity 0.25s linear; }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-datepicker__native {
      opacity: 0;
      width: 100%;
      min-width: calc(100% - 1rem);
      position: absolute;
      height: 38px; }
      .dc-input--disabled .dc-datepicker__native {
        border-color: var(--general-disabled); }
    .dc-datepicker__display {
      display: flex;
      align-items: center;
      justify-content: flex-start;
      padding-left: 1rem;
      height: 38px;
      position: relative;
      width: 100%; }
      .dc-datepicker__display-text {
        background-color: inherit;
        padding-top: 0.2rem;
        color: var(--text-prominent); }
        .dc-datepicker__display-text--has-error {
          padding-top: unset;
          color: var(--brand-red-coral); }
        .dc-datepicker__display-text--disabled {
          color: var(--text-disabled); }
    .dc-datepicker__calendar-icon {
      pointer-events: none;
      margin-right: 1rem; }
    .dc-datepicker__placeholder {
      color: var(--text-less-prominent);
      transform: none;
      transition: transform 0.25s linear;
      position: absolute;
      font-size: 1.4rem;
      left: 1.2rem; }
      .dc-datepicker__placeholder--has-value {
        transform: translate3d(-14px, -20px, 0px) scale(0.7);
        color: var(--text-general);
        background-color: var(--fill-normal); }
      .dc-datepicker__placeholder--has-error {
        color: var(--brand-red-coral); }
      .dc-datepicker__placeholder--is-focused {
        color: var(--brand-secondary); }
      .dc-input--disabled .dc-datepicker__placeholder {
        color: var(--text-disabled); }
    .dc-datepicker__error {
      display: flex;
      position: absolute;
      top: 4.4rem;
      left: 1.2rem; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define data-list; weak */
.data-list {
  position: relative;
  height: 100%;
  display: flex;
  flex-direction: column; }
  .data-list__body {
    flex: 1; }
    .data-list__body-wrapper {
      display: flex;
      flex-direction: column;
      height: 100%; }
  .data-list__footer {
    width: 100%;
    background: var(--general-main-1);
    border-top: 2px solid var(--border-disabled);
    display: flex;
    align-items: center;
    position: relative; }
  .data-list__item {
    height: inherit; }
    .data-list__item--wrapper {
      height: inherit;
      text-decoration: none;
      -webkit-touch-callout: none;
      -webkit-tap-highlight-color: transparent; }
    @media (min-width: 320px) and (max-width: 767px) {
      .data-list__item {
        border-radius: 4px; } }
  .data-list__row {
    display: flex;
    flex-direction: row;
    padding: 4px 16px;
    width: 100%; }
    .data-list__row > * {
      flex: 1; }
    .data-list__row-content {
      font-size: 1.4rem;
      line-height: 2rem;
      color: var(--text-general); }
    .data-list__row-cell--amount {
      display: flex;
      flex-direction: column;
      align-items: flex-end;
      flex: none; }
    .data-list__row-title {
      font-size: 1.4rem;
      font-weight: bold;
      color: var(--text-prominent);
      line-height: 2rem; }
      @media (min-width: 320px) and (max-width: 767px) {
        .data-list__row-title {
          font-size: 1.2rem; } }
    .data-list__row-divider {
      margin: 0 1.6rem; }
      .data-list__row-divider:after {
        content: '';
        display: block;
        border-top: 1px solid var(--general-main-1); }
    .data-list__row--wrapper {
      height: 100%; }
  .data-list__desc--wrapper {
    height: inherit;
    display: flex;
    text-align: center;
    align-items: center;
    font-size: var(--text-size-xxs);
    color: var(--text-general);
    padding: 1rem; }

/* stylelint-disable-next-line plugin/selector-bem-pattern */
.ReactVirtualized__List {
  outline: 0; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-data-table */
.dc-data-table {
  display: flex;
  flex-direction: column; }

/** @define table */
.table {
  display: flex;
  flex-direction: column;
  box-sizing: border-box;
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: default;
  text-align: center;
  line-height: 1.5;
  color: var(--text-general); }
  .table__cell {
    padding: 0.75em;
    display: flex;
    align-items: center; }
    .table__cell:first-child {
      padding-left: 0; }
    .table__cell:last-child {
      padding-right: 0; }
  .table__row {
    display: grid;
    grid-auto-rows: -webkit-max-content;
    grid-auto-rows: max-content;
    padding: 0 1.6em;
    box-sizing: border-box;
    text-decoration: none;
    position: relative; }
    .table__row, .table__row:active, .table__row:visited {
      color: var(--text-general); }
    .table__row--preloader {
      position: absolute;
      top: 0;
      left: 0;
      height: 100%;
      max-height: 64px;
      width: 100%; }
  .table__head {
    border-bottom: 2px solid var(--general-section-1);
    height: 52px; }
  .table__head .table__row {
    color: var(--text-prominent);
    height: 100%;
    border-bottom: none; }
  .table__body {
    overflow: hidden;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    flex-basis: 0; }
    .table__body .table__row-link:hover {
      background-color: var(--state-hover);
      cursor: pointer; }
    .table__body .table__row:last-child {
      border-bottom: none; }
  .table__head, .table__foot {
    font-weight: 500;
    white-space: nowrap; }
  .table__foot {
    border-top: 2px solid var(--general-section-1); }
  .table__foot .table__row {
    color: var(--text-general);
    border-bottom: none; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-dialog */
.dc-dialog {
  width: 100vw;
  height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  flex-direction: column;
  z-index: 999;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0; }
  .dc-dialog__wrapper {
    position: fixed;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 999;
    transition: opacity 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25);
    background-color: var(--overlay-outside-dialog); }
    .dc-dialog__wrapper--enter, .dc-dialog__wrapper--exit {
      opacity: 0; }
      .dc-dialog__wrapper--enter .dc-dialog__dialog, .dc-dialog__wrapper--exit .dc-dialog__dialog {
        transform: translate3d(0, 50px, 0);
        opacity: 0; }
    .dc-dialog__wrapper--enter-done {
      opacity: 1; }
      .dc-dialog__wrapper--enter-done .dc-dialog__dialog {
        transform: translate3d(0, 0, 0);
        opacity: 1; }
    .dc-dialog__wrapper--has-portal {
      background-color: transparent; }
  .dc-dialog__dialog {
    max-width: 560px;
    max-height: 320px;
    min-width: 440px;
    min-height: 176px;
    margin-top: -48px;
    padding: 2.4rem;
    border-radius: 8px;
    box-sizing: border-box;
    display: flex;
    justify-content: space-around;
    flex-direction: column;
    align-items: center;
    box-shadow: 0 2px 8px 0 var(--shadow-menu);
    background-color: var(--general-main-2);
    transition: transform 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25), opacity 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25); }
  .dc-dialog__header {
    align-self: flex-start;
    font-size: 1.6rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    text-align: left;
    line-height: 1.75;
    margin-bottom: 2.4rem;
    line-height: 1.5;
    color: var(--text-prominent); }
    .dc-dialog__header-wrapper {
      width: 100%;
      display: flex;
      justify-content: space-between; }
    .dc-dialog__header--close {
      cursor: pointer; }
  .dc-dialog__content {
    align-self: flex-start;
    margin-bottom: 2.4rem;
    max-width: calc(440px - 4.8rem);
    width: 100%;
    /* postcss-bem-linter: ignore */ }
    .dc-dialog__content .dc-input__label {
      background-color: var(--general-main-2); }
    .dc-dialog__content--centered {
      align-self: center; }
  .dc-dialog__footer {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    width: 100%; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-dialog__footer {
        flex-wrap: wrap;
        align-items: flex-start; } }
  .dc-dialog__button {
    margin-left: 0.8rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-dialog__button:not(:last-child) {
        margin-bottom: 1rem; } }

@media screen and (max-width: 560px) {
  .dc-dialog__dialog {
    min-width: auto; }
    .dc-dialog__dialog--has-margin {
      min-width: unset;
      width: calc(100vw - 4.8rem); } }

